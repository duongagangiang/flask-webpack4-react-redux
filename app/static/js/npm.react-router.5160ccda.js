(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[19],{"4p7I":function(t,e,r){"use strict";var n=r("2W6z");var o=r.n(n);var a=r("QLaP");var l=r.n(a);var i=r("q1tI");var f=r.n(i);var c=r("17x9");var u=r.n(c);var p=r("8tgM");var s=r.n(p);var h={};var v=1e4;var d=0;var g=function t(e,r){var n=""+r.end+r.strict+r.sensitive;var o=h[n]||(h[n]={});if(o[e])return o[e];var a=[];var i=s()(e,a,r);var c={re:i,keys:a};if(d<v){o[e]=c;d++}return c};var y=function t(e){var r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var n=arguments[2];if(typeof r==="string")r={path:r};var o=r,a=o.path,i=o.exact,c=i===undefined?false:i,u=o.strict,p=u===undefined?false:u,s=o.sensitive,l=s===undefined?false:s;if(a==null)return n;var f=g(a,{end:c,strict:p,sensitive:l}),h=f.re,v=f.keys;var d=h.exec(e);if(!d)return null;var y=d[0],m=d.slice(1);var b=e===y;if(c&&!b)return null;return{path:a,url:a==="/"&&y===""?"/":y,isExact:b,params:v.reduce(function(t,e,r){t[e.name]=m[r];return t},{})}};var m=y;var b=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r){if(Object.prototype.hasOwnProperty.call(r,n)){t[n]=r[n]}}}return t};function x(t,e){if(!(t instanceof e)){throw new TypeError("Cannot call a class as a function")}}function w(t,e){if(!t){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e&&(typeof e==="object"||typeof e==="function")?e:t}function R(t,e){if(typeof e!=="function"&&e!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof e)}t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:false,writable:true,configurable:true}});if(e)Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e}var j=function t(e){return f.a.Children.count(e)===0};var C=function(i){R(c,i);function c(){var t,e,r;x(this,c);for(var n=arguments.length,o=Array(n),a=0;a<n;a++){o[a]=arguments[a]}return r=(t=(e=w(this,i.call.apply(i,[this].concat(o))),e),e.state={match:e.computeMatch(e.props,e.context.router)},t),w(e,r)}c.prototype.getChildContext=function t(){return{router:b({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}};c.prototype.computeMatch=function t(e,r){var n=e.computedMatch,o=e.location,a=e.path,i=e.strict,c=e.exact,u=e.sensitive;if(n)return n;l()(r,"You should not use <Route> or withRouter() outside a <Router>");var p=r.route;var s=(o||p.location).pathname;return m(s,{path:a,strict:i,exact:c,sensitive:u},p.match)};c.prototype.componentWillMount=function t(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");o()(!(this.props.component&&this.props.children&&!j(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");o()(!(this.props.render&&this.props.children&&!j(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")};c.prototype.componentWillReceiveProps=function t(e,r){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');this.setState({match:this.computeMatch(e,r.router)})};c.prototype.render=function t(){var e=this.state.match;var r=this.props,n=r.children,o=r.component,t=r.render;var a=this.context.router,i=a.history,c=a.route,u=a.staticContext;var p=this.props.location||c.location;var s={match:e,location:p,history:i,staticContext:u};if(o)return e?f.a.createElement(o,s):null;if(t)return e?t(s):null;if(typeof n==="function")return n(s);if(n&&!j(n))return f.a.Children.only(n);return null};return c}(f.a.Component);C.propTypes={computedMatch:u.a.object,path:u.a.string,exact:u.a.bool,strict:u.a.bool,sensitive:u.a.bool,component:u.a.func,render:u.a.func,children:u.a.oneOfType([u.a.func,u.a.node]),location:u.a.object};C.contextTypes={router:u.a.shape({history:u.a.object.isRequired,route:u.a.object.isRequired,staticContext:u.a.object})};C.childContextTypes={router:u.a.object.isRequired};var E=e["a"]=C},"7Qc+":function(t,e){t.exports=Array.isArray||function(t){return Object.prototype.toString.call(t)=="[object Array]"}},"8tgM":function(t,e,r){var h=r("7Qc+");t.exports=s;t.exports.parse=n;t.exports.compile=o;t.exports.tokensToFunction=a;t.exports.tokensToRegExp=p;var j=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function n(t,e){var r=[];var n=0;var o=0;var a="";var i=e&&e.delimiter||"/";var c;while((c=j.exec(t))!=null){var u=c[0];var p=c[1];var s=c.index;a+=t.slice(o,s);o=s+u.length;if(p){a+=p[1];continue}var l=t[o];var f=c[2];var h=c[3];var v=c[4];var d=c[5];var y=c[6];var m=c[7];if(a){r.push(a);a=""}var b=f!=null&&l!=null&&l!==f;var g=y==="+"||y==="*";var x=y==="?"||y==="*";var w=c[2]||i;var R=v||d;r.push({name:h||n++,prefix:f||"",delimiter:w,optional:x,repeat:g,partial:b,asterisk:!!m,pattern:R?E(R):m?".*":"[^"+C(w)+"]+?"})}if(o<t.length){a+=t.substr(o)}if(a){r.push(a)}return r}function o(t,e){return a(n(t,e))}function v(t){return encodeURI(t).replace(/[\/?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function d(t){return encodeURI(t).replace(/[?#]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function a(l){var f=new Array(l.length);for(var t=0;t<l.length;t++){if(typeof l[t]==="object"){f[t]=new RegExp("^(?:"+l[t].pattern+")$")}}return function(t,e){var r="";var n=t||{};var o=e||{};var a=o.pretty?v:encodeURIComponent;for(var i=0;i<l.length;i++){var c=l[i];if(typeof c==="string"){r+=c;continue}var u=n[c.name];var p;if(u==null){if(c.optional){if(c.partial){r+=c.prefix}continue}else{throw new TypeError('Expected "'+c.name+'" to be defined')}}if(h(u)){if(!c.repeat){throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(u)+"`")}if(u.length===0){if(c.optional){continue}else{throw new TypeError('Expected "'+c.name+'" to not be empty')}}for(var s=0;s<u.length;s++){p=a(u[s]);if(!f[i].test(p)){throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(p)+"`")}r+=(s===0?c.prefix:c.delimiter)+p}continue}p=c.asterisk?d(u):a(u);if(!f[i].test(p)){throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+p+'"')}r+=c.prefix+p}return r}}function C(t){return t.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function E(t){return t.replace(/([=!:$\/()])/g,"\\$1")}function f(t,e){t.keys=e;return t}function y(t){return t.sensitive?"":"i"}function i(t,e){var r=t.source.match(/\((?!\?)/g);if(r){for(var n=0;n<r.length;n++){e.push({name:n,prefix:null,delimiter:null,optional:false,repeat:false,partial:false,asterisk:false,pattern:null})}}return f(t,e)}function c(t,e,r){var n=[];for(var o=0;o<t.length;o++){n.push(s(t[o],e,r).source)}var a=new RegExp("(?:"+n.join("|")+")",y(r));return f(a,e)}function u(t,e,r){return p(n(t,r),e,r)}function p(t,e,r){if(!h(e)){r=e||r;e=[]}r=r||{};var n=r.strict;var o=r.end!==false;var a="";for(var i=0;i<t.length;i++){var c=t[i];if(typeof c==="string"){a+=C(c)}else{var u=C(c.prefix);var p="(?:"+c.pattern+")";e.push(c);if(c.repeat){p+="(?:"+u+p+")*"}if(c.optional){if(!c.partial){p="(?:"+u+"("+p+"))?"}else{p=u+"("+p+")?"}}else{p=u+"("+p+")"}a+=p}}var s=C(r.delimiter||"/");var l=a.slice(-s.length)===s;if(!n){a=(l?a.slice(0,-s.length):a)+"(?:"+s+"(?=$))?"}if(o){a+="$"}else{a+=n&&l?"":"(?="+s+"|$)"}return f(new RegExp("^"+a,y(r)),e)}function s(t,e,r){if(!h(e)){r=e||r;e=[]}r=r||{};if(t instanceof RegExp){return i(t,e)}if(h(t)){return c(t,e,r)}return u(t,e,r)}},"9C/b":function(t,e,r){"use strict";var n=r("q1tI");var a=r.n(n);var o=r("17x9");var i=r.n(o);var c=r("2mql");var u=r.n(c);var p=r("4p7I");var s=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r){if(Object.prototype.hasOwnProperty.call(r,n)){t[n]=r[n]}}}return t};function l(t,e){var r={};for(var n in t){if(e.indexOf(n)>=0)continue;if(!Object.prototype.hasOwnProperty.call(t,n))continue;r[n]=t[n]}return r}var f=function t(o){var e=function t(e){var r=e.wrappedComponentRef,n=l(e,["wrappedComponentRef"]);return a.a.createElement(p["a"],{children:function t(e){return a.a.createElement(o,s({},n,e,{ref:r}))}})};e.displayName="withRouter("+(o.displayName||o.name)+")";e.WrappedComponent=o;e.propTypes={wrappedComponentRef:i.a.func};return u()(e,o)};e["a"]=f},nr6O:function(t,e,r){"use strict";var n=r("2W6z");var o=r.n(n);var a=r("QLaP");var u=r.n(a);var i=r("q1tI");var p=r.n(i);var c=r("17x9");var s=r.n(c);var l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r){if(Object.prototype.hasOwnProperty.call(r,n)){t[n]=r[n]}}}return t};function f(t,e){if(!(t instanceof e)){throw new TypeError("Cannot call a class as a function")}}function h(t,e){if(!t){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e&&(typeof e==="object"||typeof e==="function")?e:t}function v(t,e){if(typeof e!=="function"&&e!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof e)}t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:false,writable:true,configurable:true}});if(e)Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e}var d=function(i){v(c,i);function c(){var t,e,r;f(this,c);for(var n=arguments.length,o=Array(n),a=0;a<n;a++){o[a]=arguments[a]}return r=(t=(e=h(this,i.call.apply(i,[this].concat(o))),e),e.state={match:e.computeMatch(e.props.history.location.pathname)},t),h(e,r)}c.prototype.getChildContext=function t(){return{router:l({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}};c.prototype.computeMatch=function t(e){return{path:"/",url:"/",params:{},isExact:e==="/"}};c.prototype.componentWillMount=function t(){var e=this;var r=this.props,n=r.children,o=r.history;u()(n==null||p.a.Children.count(n)===1,"A <Router> may have only one child element");this.unlisten=o.listen(function(){e.setState({match:e.computeMatch(o.location.pathname)})})};c.prototype.componentWillReceiveProps=function t(e){o()(this.props.history===e.history,"You cannot change <Router history>")};c.prototype.componentWillUnmount=function t(){this.unlisten()};c.prototype.render=function t(){var e=this.props.children;return e?p.a.Children.only(e):null};return c}(p.a.Component);d.propTypes={history:s.a.object.isRequired,children:s.a.node};d.contextTypes={router:s.a.object};d.childContextTypes={router:s.a.object.isRequired};e["a"]=d}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIl0sIm5hbWVzIjpbInBhdHRlcm5DYWNoZSIsImNhY2hlTGltaXQiLCJjYWNoZUNvdW50IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwib3B0aW9ucyIsImNhY2hlS2V5IiwiZW5kIiwic3RyaWN0Iiwic2Vuc2l0aXZlIiwiY2FjaGUiLCJrZXlzIiwicmUiLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwiY29tcGlsZWRQYXR0ZXJuIiwibWF0Y2hQYXRoIiwicGF0aG5hbWUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJwYXJlbnQiLCJwYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRleGFjdCIsImV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwibWF0Y2giLCJleGVjIiwidXJsIiwidmFsdWVzIiwic2xpY2UiLCJpc0V4YWN0IiwicGFyYW1zIiwicmVkdWNlIiwibWVtbyIsImtleSIsImluZGV4IiwibmFtZSIsImVzX21hdGNoUGF0aCIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsInNvdXJjZSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsImlzRW1wdHlDaGlsZHJlbiIsImNoaWxkcmVuIiwicmVhY3RfZGVmYXVsdCIsImEiLCJDaGlsZHJlbiIsImNvdW50IiwiUm91dGVfUm91dGUiLCJfUmVhY3QkQ29tcG9uZW50IiwiUm91dGUiLCJfdGVtcCIsIl90aGlzIiwiX3JldCIsInRoaXMiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImFwcGx5IiwiY29uY2F0Iiwic3RhdGUiLCJjb21wdXRlTWF0Y2giLCJwcm9wcyIsImNvbnRleHQiLCJyb3V0ZXIiLCJnZXRDaGlsZENvbnRleHQiLCJyb3V0ZSIsImxvY2F0aW9uIiwiX3JlZiIsImNvbXB1dGVkTWF0Y2giLCJicm93c2VyX2RlZmF1bHQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJ3YXJuaW5nX2RlZmF1bHQiLCJjb21wb25lbnQiLCJyZW5kZXIiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwibmV4dENvbnRleHQiLCJzZXRTdGF0ZSIsIl9wcm9wcyIsIl9jb250ZXh0JHJvdXRlciIsImhpc3RvcnkiLCJzdGF0aWNDb250ZXh0IiwiY3JlYXRlRWxlbWVudCIsIm9ubHkiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJvYmplY3QiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJjb250ZXh0VHlwZXMiLCJzaGFwZSIsImlzUmVxdWlyZWQiLCJjaGlsZENvbnRleHRUeXBlcyIsImVzX1JvdXRlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc0FycmF5IiwiYXJyIiwidG9TdHJpbmciLCJpc2FycmF5IiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwiUmVnRXhwIiwiam9pbiIsInN0ciIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJyZXMiLCJtIiwiZXNjYXBlZCIsIm9mZnNldCIsIm5leHQiLCJwcmVmaXgiLCJjYXB0dXJlIiwiZ3JvdXAiLCJtb2RpZmllciIsImFzdGVyaXNrIiwicHVzaCIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwic3Vic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwicmVwbGFjZSIsImMiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJlbmNvZGVBc3RlcmlzayIsIm1hdGNoZXMiLCJvYmoiLCJvcHRzIiwiZGF0YSIsImVuY29kZSIsInByZXR0eSIsImVuY29kZVVSSUNvbXBvbmVudCIsInRva2VuIiwic2VnbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJqIiwidGVzdCIsImF0dGFjaEtleXMiLCJmbGFncyIsInJlZ2V4cFRvUmVnZXhwIiwiZ3JvdXBzIiwiYXJyYXlUb1JlZ2V4cCIsInBhcnRzIiwicmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJlbmRzV2l0aERlbGltaXRlciIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJuIiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiX1JvdXRlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJpbmRleE9mIiwid2l0aFJvdXRlciIsIkMiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJyb3V0ZUNvbXBvbmVudFByb3BzIiwicmVmIiwiZGlzcGxheU5hbWUiLCJXcmFwcGVkQ29tcG9uZW50Iiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwid2FybmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJpbnZhcmlhbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImludmFyaWFudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJSb3V0ZXIiLCJfdGhpczIiLCJ1bmxpc3RlbiIsImxpc3RlbiIsImNvbXBvbmVudFdpbGxVbm1vdW50Il0sIm1hcHBpbmdzIjoicVBBRUEsSUFBQUEsRUFBQSxHQUNBLElBQUFDLEVBQUEsSUFDQSxJQUFBQyxF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QUFBaEosRUFBS0MsU0FBQXVDLEtBQUExQyxHQUFBLE1BRzNCLE9BQUFxSixFQXhFQSxDQXlFRUgsRUFBQWhKLEVBQUt5QyxXQUVQMEcsRUFBQXpHLFVBQUEsQ0FDQUwsUUFBVzZHLEVBQUFsSixFQUFTNEMsT0FBQVEsV0FDcEJ0RCxTQUFZb0osRUFBQWxKLEVBQVNpRCxNQUVyQmtHLEVBQUFqRyxhQUFBLENBQ0E5QixPQUFVOEgsRUFBQWxKLEVBQVM0QyxRQUVuQnVHLEVBQUE5RixrQkFBQSxDQUNBakMsT0FBVThILEVBQUFsSixFQUFTNEMsT0FBQVEsWUFJSkcsRUFBQSIsImZpbGUiOiJqcy9ucG0ucmVhY3Qtcm91dGVyLjUxNjBjY2RhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVQYXRoID0gZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0dGVybiwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSBcIlwiICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgcGFyZW50ID0gYXJndW1lbnRzWzJdO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIikgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwYXRoID0gX29wdGlvbnMucGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cblxuICBpZiAocGF0aCA9PSBudWxsKSByZXR1cm4gcGFyZW50O1xuXG4gIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aChwYXRoLCB7IGVuZDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSxcbiAgICAgIHJlID0gX2NvbXBpbGVQYXRoLnJlLFxuICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gIHZhciBtYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUpO1xuXG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuXG4gIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcblxuICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCwgLy8gdGhlIHBhdGggcGF0dGVybiB1c2VkIHRvIG1hdGNoXG4gICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgaXNFeGFjdDogaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tIFwid2FybmluZ1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiaW52YXJpYW50XCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aFwiO1xuXG52YXIgaXNFbXB0eUNoaWxkcmVuID0gZnVuY3Rpb24gaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIHNpbmdsZSBwYXRoIGFuZCByZW5kZXJpbmcuXG4gKi9cblxudmFyIFJvdXRlID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSb3V0ZSgpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMsIF90aGlzLmNvbnRleHQucm91dGVyKVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgUm91dGUucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICByb3V0ZToge1xuICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IHRoaXMuc3RhdGUubWF0Y2hcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2goX3JlZiwgcm91dGVyKSB7XG4gICAgdmFyIGNvbXB1dGVkTWF0Y2ggPSBfcmVmLmNvbXB1dGVkTWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uID0gX3JlZi5sb2NhdGlvbixcbiAgICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgICAgc2Vuc2l0aXZlID0gX3JlZi5zZW5zaXRpdmU7XG5cbiAgICBpZiAoY29tcHV0ZWRNYXRjaCkgcmV0dXJuIGNvbXB1dGVkTWF0Y2g7IC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuXG4gICAgaW52YXJpYW50KHJvdXRlciwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgdmFyIHJvdXRlID0gcm91dGVyLnJvdXRlO1xuXG4gICAgdmFyIHBhdGhuYW1lID0gKGxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uKS5wYXRobmFtZTtcblxuICAgIHJldHVybiBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSwgcm91dGUubWF0Y2gpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghKHRoaXMucHJvcHMuY29tcG9uZW50ICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIik7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkXCIpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZFwiKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgd2FybmluZyghKCFuZXh0UHJvcHMubG9jYXRpb24gJiYgdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF0Y2g6IHRoaXMuY29tcHV0ZU1hdGNoKG5leHRQcm9wcywgbmV4dENvbnRleHQucm91dGVyKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIG1hdGNoID0gdGhpcy5zdGF0ZS5tYXRjaDtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGNvbXBvbmVudCA9IF9wcm9wcy5jb21wb25lbnQsXG4gICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG4gICAgdmFyIF9jb250ZXh0JHJvdXRlciA9IHRoaXMuY29udGV4dC5yb3V0ZXIsXG4gICAgICAgIGhpc3RvcnkgPSBfY29udGV4dCRyb3V0ZXIuaGlzdG9yeSxcbiAgICAgICAgcm91dGUgPSBfY29udGV4dCRyb3V0ZXIucm91dGUsXG4gICAgICAgIHN0YXRpY0NvbnRleHQgPSBfY29udGV4dCRyb3V0ZXIuc3RhdGljQ29udGV4dDtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG4gICAgdmFyIHByb3BzID0geyBtYXRjaDogbWF0Y2gsIGxvY2F0aW9uOiBsb2NhdGlvbiwgaGlzdG9yeTogaGlzdG9yeSwgc3RhdGljQ29udGV4dDogc3RhdGljQ29udGV4dCB9O1xuXG4gICAgaWYgKGNvbXBvbmVudCkgcmV0dXJuIG1hdGNoID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IG51bGw7XG5cbiAgICBpZiAocmVuZGVyKSByZXR1cm4gbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbDtcblxuICAgIGlmICh0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIGNoaWxkcmVuKHByb3BzKTtcblxuICAgIGlmIChjaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSkgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZS5wcm9wVHlwZXMgPSB7XG4gIGNvbXB1dGVkTWF0Y2g6IFByb3BUeXBlcy5vYmplY3QsIC8vIHByaXZhdGUsIGZyb20gPFN3aXRjaD5cbiAgcGF0aDogUHJvcFR5cGVzLnN0cmluZyxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICBjb21wb25lbnQ6IFByb3BUeXBlcy5mdW5jLFxuICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGUuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHJvdXRlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9KVxufTtcblJvdXRlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO1xuaW1wb3J0IFJvdXRlIGZyb20gXCIuL1JvdXRlXCI7XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cbnZhciB3aXRoUm91dGVyID0gZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIEMgPSBmdW5jdGlvbiBDKHByb3BzKSB7XG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnRSZWYgPSBwcm9wcy53cmFwcGVkQ29tcG9uZW50UmVmLFxuICAgICAgICByZW1haW5pbmdQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHtcbiAgICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG4gIEMucHJvcFR5cGVzID0ge1xuICAgIHdyYXBwZWRDb21wb25lbnRSZWY6IFByb3BUeXBlcy5mdW5jXG4gIH07XG5cbiAgcmV0dXJuIGhvaXN0U3RhdGljcyhDLCBDb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ3YXJuaW5nXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJpbnZhcmlhbnRcIjtcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCBcIkEgPFJvdXRlcj4gbWF5IGhhdmUgb25seSBvbmUgY2hpbGQgZWxlbWVudFwiKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHJldHVybiBjaGlsZHJlbiA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Sb3V0ZXIucHJvcFR5cGVzID0ge1xuICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblJvdXRlci5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyJdLCJzb3VyY2VSb290IjoiIn0=